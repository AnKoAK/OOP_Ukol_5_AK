2nd commit
First change in GIT_Illustrative_File_2_AK.
Change was done after 1st commit.

7th commit
In 6th commit there was no change in branch 'master'
however tehre was change in this file in branch 'branch2AK'.


8th commit
Change of this file in branch 'master'. 
So 6th commit was a change of this file in branch 'branch2AK'
and 7th and 8th commit was changed in branch 'master'.

9th commit
merging 'branch2AK' into 'master' - adding 6th commit.
There was a conflict, because this file was changed in both branches
it was necessary to remove << == >> 
for the text of 6th commit (see bellow) to be added 
and the 7th and 8th commit  to save as well. 

Added text
6th commit (1st in branch2AK)

There were no changes in file in commits 3 to 5.
change done in new branch 'branch2AK'.

The text could be also added manually to right place between 5th and 7th commit
but for illustration, that it was merged, it will stay in the text of 9th commit.
 
10th commit (2nd in branch2AK, 1st in branch2AK after 1st merging)
In 9th commit this branch was merged to branch 'master'.
There were no changes of this file in commit 7th and 8th in this branch.
However, there were changes of this file in the branch 'master' in 7th and 8th commit
therefore the merging in 9th commit.
Now we are switched to branch2AK again.

12th commit 
Fixing conflict of merging branch 'branch2AK' to branch 'master' in this file.
(do the upper steps 9th and 10th were in conflict).
Because the first conflict was solved by modyfying this file in 'master'
and in 10th commit which was done in 'branch2AK' was also a change of this file.
So there occured conflict again.
Solving every conflict means modifying the file in the branch we want to merge to (here 'master').
So every change of the conflicted file in next steps in other branches will create conflicts again. 


